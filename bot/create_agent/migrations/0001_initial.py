# Generated by Django 5.2 on 2025-05-24 10:59

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Agent",
            fields=[
                (
                    "agent_id",
                    models.AutoField(
                        help_text="Primary key for the agent.",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "name",
                    models.CharField(help_text="Name of the agent.", max_length=100),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True,
                        help_text="Optional description of the agent.",
                        null=True,
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Timestamp when the agent was created.",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="Timestamp when the agent was last updated.",
                    ),
                ),
                (
                    "is_deleted",
                    models.BooleanField(
                        default=False, help_text="Indicates if the agent is deleted."
                    ),
                ),
                (
                    "is_archived",
                    models.BooleanField(
                        default=False, help_text="Indicates if the agent is archived."
                    ),
                ),
                (
                    "is_favorite",
                    models.BooleanField(
                        default=False,
                        help_text="Indicates if the agent is marked as favorite.",
                    ),
                ),
                (
                    "visibility",
                    models.CharField(
                        choices=[("public", "Public"), ("private", "Private")],
                        default="private",
                        help_text="Visibility of the agent: public or private.",
                        max_length=50,
                    ),
                ),
                (
                    "avatar_url",
                    models.URLField(
                        blank=True,
                        help_text="Optional URL for the agent's avatar.",
                        null=True,
                    ),
                ),
                (
                    "configuration",
                    models.JSONField(
                        blank=True,
                        help_text="Optional JSON configuration for the agent.",
                        null=True,
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        help_text="The user who owns this agent.",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="agents",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="AgentDocuments",
            fields=[
                ("document_id", models.AutoField(primary_key=True, serialize=False)),
                (
                    "document_name",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                ("document_description", models.TextField(blank=True, null=True)),
                ("document_url", models.URLField(max_length=500)),
                ("document_size", models.BigIntegerField(blank=True, null=True)),
                (
                    "document_format",
                    models.CharField(blank=True, max_length=50, null=True),
                ),
                (
                    "document_language",
                    models.CharField(blank=True, max_length=50, null=True),
                ),
                (
                    "document_tags",
                    models.JSONField(blank=True, default=list, null=True),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("is_active", models.BooleanField(default=True)),
                ("is_deleted", models.BooleanField(default=False)),
                ("is_archived", models.BooleanField(default=False)),
                ("meta_data", models.JSONField(blank=True, default=dict, null=True)),
                (
                    "agent",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="documents",
                        to="create_agent.agent",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="AgentEmbeddings",
            fields=[
                (
                    "embedding_id",
                    models.AutoField(
                        help_text="Primary key for the embedding.",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "embedding_model",
                    models.CharField(
                        blank=True,
                        help_text="Name of the embedding model (e.g., openai-ada, sentence-transformers, etc.).",
                        max_length=100,
                        null=True,
                    ),
                ),
                (
                    "vector_dimension",
                    models.IntegerField(
                        blank=True,
                        help_text="Dimension of the embedding vector.",
                        null=True,
                    ),
                ),
                (
                    "similarity_score",
                    models.FloatField(
                        blank=True,
                        help_text="Similarity score with respect to a query vector.",
                        null=True,
                    ),
                ),
                (
                    "source_url",
                    models.URLField(
                        blank=True,
                        help_text="Original source URL if the object was scraped or fetched online.",
                        null=True,
                    ),
                ),
                (
                    "language",
                    models.CharField(
                        blank=True,
                        help_text="Language of the text (e.g., English, Spanish).",
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "token_count",
                    models.IntegerField(
                        blank=True, help_text="Number of tokens in the text.", null=True
                    ),
                ),
                (
                    "tags",
                    models.JSONField(
                        blank=True,
                        default=list,
                        help_text="Tags associated with the embedding (e.g., ['finance', 'health']).",
                        null=True,
                    ),
                ),
                (
                    "generated_by_user",
                    models.BooleanField(
                        default=True,
                        help_text="Indicates if the embedding was generated by a user or an automated process.",
                    ),
                ),
                (
                    "object_id",
                    models.CharField(
                        blank=True,
                        help_text="ID of the object (e.g., document, text, etc.).",
                        max_length=255,
                        null=True,
                    ),
                ),
                (
                    "object_type",
                    models.CharField(
                        blank=True,
                        help_text="Type of the object (e.g., document, text, etc.).",
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "object_name",
                    models.CharField(
                        blank=True,
                        help_text="Name of the object (e.g., document name, text name, etc.).",
                        max_length=255,
                        null=True,
                    ),
                ),
                (
                    "embedding_vector",
                    models.JSONField(
                        blank=True,
                        help_text="The embedding vector as a list of floats.",
                        null=True,
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Timestamp when the embedding was created.",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="Timestamp when the embedding was last updated.",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True, help_text="Indicates if the embedding is active."
                    ),
                ),
                (
                    "is_deleted",
                    models.BooleanField(
                        default=False,
                        help_text="Indicates if the embedding is deleted.",
                    ),
                ),
                (
                    "is_archived",
                    models.BooleanField(
                        default=False,
                        help_text="Indicates if the embedding is archived.",
                    ),
                ),
                (
                    "meta_data",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Optional metadata for the embedding.",
                        null=True,
                    ),
                ),
                (
                    "agent",
                    models.ForeignKey(
                        help_text="The agent this embedding belongs to.",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="embeddings",
                        to="create_agent.agent",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="AgentIntegrations",
            fields=[
                (
                    "integration_id",
                    models.AutoField(
                        help_text="Primary key for the integration.",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "integration_name",
                    models.CharField(
                        blank=True,
                        help_text="Name of the integration.",
                        max_length=255,
                        null=True,
                    ),
                ),
                (
                    "integration_category",
                    models.CharField(
                        blank=True,
                        help_text="Category of the integration, e.g., CRM, ERP, etc.",
                        max_length=100,
                        null=True,
                    ),
                ),
                (
                    "integration_priority",
                    models.IntegerField(
                        default=0,
                        help_text="Priority for UI or logic that chooses a default integration.",
                    ),
                ),
                (
                    "integration_logo_url",
                    models.URLField(
                        blank=True,
                        help_text="URL for the integration's logo (for frontend display).",
                        null=True,
                    ),
                ),
                (
                    "integration_description",
                    models.TextField(
                        blank=True,
                        help_text="Description of the integration.",
                        null=True,
                    ),
                ),
                (
                    "integration_url",
                    models.URLField(
                        blank=True,
                        help_text="URL to the integration's main page or API.",
                        null=True,
                    ),
                ),
                (
                    "integration_api_key",
                    models.CharField(
                        blank=True,
                        help_text="API key for the integration, if applicable.",
                        max_length=255,
                        null=True,
                    ),
                ),
                (
                    "integration_api_secret",
                    models.CharField(
                        blank=True,
                        help_text="API secret for the integration, if applicable.",
                        max_length=255,
                        null=True,
                    ),
                ),
                (
                    "integration_auth_type",
                    models.CharField(
                        blank=True,
                        help_text="Authentication type, e.g., OAuth, API Key.",
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "integration_auth_url",
                    models.URLField(
                        blank=True,
                        help_text="URL for authentication (OAuth, etc.).",
                        null=True,
                    ),
                ),
                (
                    "integration_auth_token",
                    models.CharField(
                        blank=True,
                        help_text="Authentication token for the integration.",
                        max_length=255,
                        null=True,
                    ),
                ),
                (
                    "integration_token_type",
                    models.CharField(
                        blank=True,
                        help_text="Type of token, e.g., Bearer, JWT.",
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "integration_auth_error_time",
                    models.DateTimeField(
                        blank=True,
                        help_text="Timestamp of the last authentication error.",
                        null=True,
                    ),
                ),
                (
                    "integration_auth_scope",
                    models.CharField(
                        blank=True,
                        help_text="OAuth scopes or permissions for the integration.",
                        max_length=255,
                        null=True,
                    ),
                ),
                (
                    "integration_auth_expiry",
                    models.DateTimeField(
                        blank=True,
                        help_text="When the current auth token expires.",
                        null=True,
                    ),
                ),
                (
                    "integration_auth_status",
                    models.CharField(
                        blank=True,
                        help_text="Status of the authentication (e.g., Valid, Expired, Error).",
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "integration_auth_response",
                    models.JSONField(
                        blank=True,
                        help_text="Raw response from the authentication endpoint.",
                        null=True,
                    ),
                ),
                (
                    "integration_auth_error",
                    models.CharField(
                        blank=True,
                        help_text="Error message from the last authentication attempt.",
                        max_length=255,
                        null=True,
                    ),
                ),
                (
                    "integration_refresh_token",
                    models.CharField(
                        blank=True,
                        help_text="Refresh token for the integration, if applicable.",
                        max_length=255,
                        null=True,
                    ),
                ),
                (
                    "integration_auth_code",
                    models.CharField(
                        blank=True,
                        help_text="Auth code for OAuth flows, if required.",
                        max_length=255,
                        null=True,
                    ),
                ),
                (
                    "configuration",
                    models.JSONField(
                        blank=True,
                        help_text="Additional configuration for the integration.",
                        null=True,
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Timestamp when the integration was created.",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="Timestamp when the integration was last updated.",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Whether the integration is currently active.",
                    ),
                ),
                (
                    "is_deleted",
                    models.BooleanField(
                        default=False,
                        help_text="Whether the integration is deleted (soft delete).",
                    ),
                ),
                (
                    "meta_data",
                    models.JSONField(
                        blank=True,
                        help_text="Additional metadata for the integration.",
                        null=True,
                    ),
                ),
                (
                    "agent",
                    models.ForeignKey(
                        help_text="The agent this integration belongs to.",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="agent_integrations",
                        to="create_agent.agent",
                    ),
                ),
            ],
            options={
                "verbose_name": "Agent Integration",
                "verbose_name_plural": "Agent Integrations",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="AgentQaPairs",
            fields=[
                (
                    "qa_pair_id",
                    models.AutoField(
                        help_text="Primary key for the QA pair.",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "qa_pair_name",
                    models.CharField(
                        blank=True,
                        help_text="Optional unique name for the QA pair.",
                        max_length=255,
                        null=True,
                        unique=True,
                    ),
                ),
                (
                    "question_type",
                    models.CharField(
                        blank=True,
                        help_text="Type of question, e.g., FAQ, General Knowledge.",
                        max_length=50,
                        null=True,
                    ),
                ),
                ("question", models.TextField(help_text="The question text.")),
                ("answer", models.TextField(help_text="The answer text.")),
                (
                    "tags",
                    models.JSONField(
                        blank=True,
                        default=list,
                        help_text="List of tags for categorization, e.g., ['billing', 'technical'].",
                        null=True,
                    ),
                ),
                (
                    "question_language",
                    models.CharField(
                        blank=True,
                        help_text="Language of the question, e.g., English, Spanish.",
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "answer_language",
                    models.CharField(
                        blank=True,
                        help_text="Language of the answer, e.g., English, Spanish.",
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "question_format",
                    models.CharField(
                        blank=True,
                        help_text="Format of the question, e.g., text, audio, video.",
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "answer_format",
                    models.CharField(
                        blank=True,
                        help_text="Format of the answer, e.g., text, audio, video.",
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "question_size",
                    models.IntegerField(
                        blank=True,
                        help_text="Size of the question in bytes.",
                        null=True,
                    ),
                ),
                (
                    "answer_size",
                    models.IntegerField(
                        blank=True, help_text="Size of the answer in bytes.", null=True
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Timestamp when the QA pair was created.",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="Timestamp when the QA pair was last updated.",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True, help_text="Indicates if the QA pair is active."
                    ),
                ),
                (
                    "is_deleted",
                    models.BooleanField(
                        default=False, help_text="Indicates if the QA pair is deleted."
                    ),
                ),
                (
                    "meta_data",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Optional metadata for the QA pair.",
                        null=True,
                    ),
                ),
                (
                    "agent",
                    models.ForeignKey(
                        help_text="The agent this QA pair belongs to.",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="qa_pairs",
                        to="create_agent.agent",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="AgentTexts",
            fields=[
                (
                    "text_id",
                    models.AutoField(
                        help_text="Primary key for the text entry.",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "text_name",
                    models.CharField(
                        blank=True,
                        help_text="Optional name or label for the text.",
                        max_length=255,
                        null=True,
                    ),
                ),
                ("text", models.TextField(help_text="The main text content.")),
                (
                    "text_language",
                    models.CharField(
                        blank=True,
                        help_text="Language of the text, e.g., English, Spanish.",
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "text_type",
                    models.CharField(
                        blank=True,
                        help_text='Type of text, e.g., "system", "greeting", "error_response".',
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Timestamp when the text was created.",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="Timestamp when the text was last updated.",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True, help_text="Indicates if the text is active."
                    ),
                ),
                (
                    "is_deleted",
                    models.BooleanField(
                        default=False, help_text="Indicates if the text is deleted."
                    ),
                ),
                (
                    "is_archived",
                    models.BooleanField(
                        default=False, help_text="Indicates if the text is archived."
                    ),
                ),
                (
                    "meta_data",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Optional metadata for the text.",
                        null=True,
                    ),
                ),
                (
                    "agent",
                    models.ForeignKey(
                        help_text="The agent this text belongs to.",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="texts",
                        to="create_agent.agent",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="AgentVectorsDatabase",
            fields=[
                (
                    "vdb_id",
                    models.AutoField(
                        help_text="Primary key for the vector database.",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "database_path",
                    models.CharField(
                        help_text="Filesystem or URI path to the vector database.",
                        max_length=255,
                    ),
                ),
                (
                    "vector_count",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="Number of vectors currently stored in the database.",
                    ),
                ),
                (
                    "vector_dimension",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Dimension of the vectors (for validation and index building).",
                        null=True,
                    ),
                ),
                (
                    "embedding_model",
                    models.CharField(
                        blank=True,
                        help_text="Model used to generate vectors (e.g., openai-ada, sentence-transformers).",
                        max_length=100,
                        null=True,
                    ),
                ),
                (
                    "storage_backend",
                    models.CharField(
                        blank=True,
                        help_text="Backend where vectors are stored (e.g., FAISS, Pinecone, Chroma, Weaviate).",
                        max_length=100,
                        null=True,
                    ),
                ),
                (
                    "index_type",
                    models.CharField(
                        blank=True,
                        help_text="Type of index used (e.g., flat, IVF, HNSW).",
                        max_length=100,
                        null=True,
                    ),
                ),
                (
                    "last_indexed_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="Timestamp of the last indexing or refresh operation.",
                        null=True,
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Timestamp when this vector database entry was created.",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="Timestamp when this vector database entry was last updated.",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Indicates if the vector database is active.",
                    ),
                ),
                (
                    "is_deleted",
                    models.BooleanField(
                        default=False,
                        help_text="Indicates if the vector database is deleted.",
                    ),
                ),
                (
                    "is_archived",
                    models.BooleanField(
                        default=False,
                        help_text="Indicates if the vector database is archived.",
                    ),
                ),
                (
                    "meta_data",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Optional metadata for the vector database.",
                        null=True,
                    ),
                ),
                (
                    "agent",
                    models.ForeignKey(
                        help_text="The agent this vector database belongs to.",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="vectors",
                        to="create_agent.agent",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="AgentWebsites",
            fields=[
                (
                    "website_id",
                    models.AutoField(
                        help_text="Primary key for the website.",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "website_url",
                    models.URLField(help_text="URL of the website.", max_length=500),
                ),
                (
                    "website_name",
                    models.CharField(help_text="Name of the website.", max_length=255),
                ),
                (
                    "website_type",
                    models.CharField(
                        blank=True,
                        help_text='Type of website, e.g., "blog", "e-commerce", "portfolio".',
                        max_length=100,
                        null=True,
                    ),
                ),
                (
                    "crawl_status",
                    models.CharField(
                        blank=True,
                        help_text='Status of crawling: e.g., "pending", "success", "failed", "partial".',
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "last_crawled_at",
                    models.DateTimeField(
                        blank=True, help_text="Timestamp of the last crawl.", null=True
                    ),
                ),
                (
                    "crawl_frequency",
                    models.CharField(
                        blank=True,
                        help_text='Crawl frequency, e.g., "daily", "weekly", "monthly", or number of days.',
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "content_language",
                    models.CharField(
                        blank=True,
                        help_text="Language of the website content, e.g., 'English', 'Spanish'.",
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "page_limit",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Maximum number of pages to crawl.",
                        null=True,
                    ),
                ),
                (
                    "is_verified",
                    models.BooleanField(
                        default=False,
                        help_text="Indicates if the website has been verified.",
                    ),
                ),
                (
                    "source_type",
                    models.CharField(
                        blank=True,
                        help_text='Source type, e.g., "manual", "automated".',
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Timestamp when the website entry was created.",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="Timestamp when the website entry was last updated.",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True, help_text="Indicates if the website is active."
                    ),
                ),
                (
                    "is_deleted",
                    models.BooleanField(
                        default=False,
                        help_text="Indicates if the website is deleted (soft delete).",
                    ),
                ),
                (
                    "is_archived",
                    models.BooleanField(
                        default=False, help_text="Indicates if the website is archived."
                    ),
                ),
                (
                    "meta_data",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Optional metadata for the website.",
                        null=True,
                    ),
                ),
                (
                    "agent",
                    models.ForeignKey(
                        help_text="The agent this website belongs to.",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="websites",
                        to="create_agent.agent",
                    ),
                ),
            ],
        ),
    ]
